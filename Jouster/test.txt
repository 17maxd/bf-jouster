       that  contained it.  If this window was in the foreground, the display switches to the previous window; if none are left, screen exits. Shells usually distin-
       guish between running as login-shell or sub-shell.  Screen runs them as sub-shells, unless told otherwise (See "shell" .screenrc command).

       Everything you type is sent to the program running in the current window.  The only exception to this is the one keystroke that is used to initiate a  command
       to  the  window manager.  By default, each command begins with a control-a (abbreviated C-a from now on), and is followed by one other keystroke.  The command
       character and all the key bindings can be fully customized to be anything you like, though they are always two characters in length.

       Screen does not understand the prefix "C-" to mean control, although this notation is used in this manual for readability.   Please  use  the  caret  notation
       ("^A" instead of "C-a") as arguments to e.g. the escape command or the -e option.  Screen will also print out control characters in caret notation.

       The  standard way to create a new window is to type "C-a c".  This creates a new window running a shell and switches to that window immediately, regardless of
       the state of the process running in the current window.  Similarly, you can create a new window with a custom command in it by first binding the command to  a
       keystroke (in your .screenrc file or at the "C-a :" command line) and then using it just like the "C-a c" command.  In addition, new windows can be created by
       running a command like:

              screen emacs prog.c

       from a shell prompt within a previously created window.  This will not run another copy of screen, but will instead supply the command name and its  arguments
       to  the  window manager (specified in the $STY environment variable) who will use it to create the new window.  The above example would start the emacs editor
       (editing prog.c) and switch to its window. - Note that you cannot transport environment variables from the invoking shell to the application  (emacs  in  this
       case), because it is forked from the parent screen process, not from the invoking shell.

       If "/var/run/utmp" is writable by screen, an appropriate record will be written to this file for each window, and removed when the window is terminated.  This
       is useful for working with "talk", "script", "shutdown", "rsend", "sccs" and other similar programs that use the utmp file to determine who you are.  As  long
       as screen is active on your terminal, the terminal's own record is removed from the utmp file. See also "C-a L".

max@maxd ~/D/T/b/Jouster> history | tail -2 |head -1 | xclip -selection clipboard |
Expected a command, but instead found end of the statement
fish: history | tail -2 |head -1 | xclip -selection clipboard |
                                                               ^
max@maxd ~/D/T/b/Jouster> history | tail -2 |head -1 | xclip -selection clipboard
Le programme  xclip  n'est pas encore install. Vous pouvez l'installer en tapant :
sudo apt install xclip
max@maxd ~/D/T/b/Jouster> history | tail -2 |head -1
sudo apt-get install libatlas-base-dev
max@maxd ~/D/T/b/Jouster> history | tail -2 | head -1
sudo apt-get install libatlas-base-dev
max@maxd ~/D/T/b/Jouster> screendump
/dev/tty0: Permission non accorde
ne peut lire /dev/vcsa
max@maxd ~/D/T/b/Jouster> sudo screendump
[sudo] Mot de passe de max :

max@maxd ~/D/T/b/Jouster> sudo screendump

max@maxd ~/D/T/b/Jouster> [25965.452354] ipheth 1-2:4.2: ipheth_get_macaddr: usb_control_msg: -110
sudo screendump > test.txt

